#RuFa 2.0-b Server +
#–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
from colorama import Fore, Back, Style
import configparser
import telebot
from telebot import types
from win10toast import ToastNotifier
import os
import socket

os.system("cls")

print("Starting...")

n = ToastNotifier() 

data = configparser.ConfigParser()
data.read("data.ini")

#Client object
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

#–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ data.ini
token = data["Data"]["token"]
print(Fore.LIGHTCYAN_EX + "Token = " + str(token))

username = data["Data"]["username"]
print("Username = " + str(username))

userid = data["Data"]["userid"]
print("Userid = " + str(userid))

backmode = "true"
print("Debug Mode = " + str(backmode))

ip = data["TCP"]["ip"]
print("\nIP = " + str(ip))

port = data["TCP"]["port"]
print("PORT = " + str(port))


#API Telegram
api_token = token
bot = telebot.TeleBot(api_token)
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)


##TCP Client trying connect to server ip:port
#FIXME: Replace on socket
def _connect():
    try:
        #FIXME: Solve the problem that ip and port are not imported into the rufa.py file
        client.connect(("LOCALHOST", YOURPORT))
        packet = client.recv(1024).decode("utf-8")
        print(Fore.LIGHTGREEN_EX + "\nGeted packet:" + str(packet))
        print("\nIP/PORT:\n" + str(client.getsockname()))
        return False
    
    except ConnectionRefusedError:
        if backmode == "true":
            print(Fore.LIGHTRED_EX + "\nTCP ERROR: 402\n" + "The server rejected the connection request")
        elif backmode == "false":
            os.system("start .vbs\TCP402")
        return True

    except ValueError:
        if backmode == "true":
            print(Fore.LIGHTRED_EX + "\nTCP ERROR: 404\nEnter values IP and PORT in file data.ini")
        elif backmode == "false":
            os.system("start .vbs\TCP404")
        return True
  
    except ConnectionResetError:
        if backmode == "true":
            print(Fore.LIGHTRED_EX + "\nTCP ERROR: 403\nThe remote host forcibly closed an existing connection")
        elif backmode == "false":
            os.system("start .vbs\TCP403")
        return True

ClientError = _connect()

#–ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(messange):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("funcüîô")
    markup.add(btn1)
    bot.send_message(messange.chat.id, 
        text="–ü—Ä–∏–≤–µ—Çüëã", 
        reply_markup=markup)


#–ö–æ–º–∞–Ω–¥–∞ func (–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π func)
@bot.message_handler(content_types=['text'])
def func(messange):
    if(messange.text == "funcüîô") and messange.from_user.id == int(userid):
        bot.send_message(messange.chat.id, 
            text="funcüîô")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        
        #–ö–Ω–æ–ø–∫–∏
        btn2 = types.KeyboardButton("üî¥Shutdownüî¥")
        btn3 = types.KeyboardButton("Info‚ÑπÔ∏è")
        btn4 = types.KeyboardButton("Pingüîî")
        btn5 = types.KeyboardButton("Locküîê")
        btn16 = types.KeyboardButton("Hibernationüíæ")
        btn17 = types.KeyboardButton("RebootüîÑ")
        btn18 = types.KeyboardButton("Specialüõ†")
        markup.add(btn2, btn3, btn4, btn5, btn16, btn17, btn18)
        bot.send_message(messange.chat.id, 
            text="–ü—Ä–∏–≤–µ—Çüëã", 
            reply_markup=markup)
        
    #–§—É–Ω–∫—Ü–∏—è Ping (–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ Windows c–∏—Å—Ç–µ–º—É)
    elif(messange.text == "Pingüîî") and messange.from_user.id == int(userid):
        if ClientError == False:
            try:
                client.send(("Ping".encode("utf-8")))
                bot.send_message(messange.chat.id, 
                    text="Actüîî")
            except ConnectionResetError:
                bot.send_message(messange.chat.id, 
                    text="TCP ERRORüî¥")
                print(Fore.LIGHTRED_EX + "TCP ERROR: Ping")
                
        elif ClientError == True:
            bot.send_message(messange.chat.id,
                text="Server disableüî¥")
        
        #n.show_toast("Rufa", "You pinged", duration = 10, icon_path ="rufa.ico")
    
    #–§—É–Ω–∫—Ü–∏—è Lock (–ë–ª–æ–∫–∏—Ä—É–µ—Ç Windows c–∏—Å—Ç–µ–º—É)
    elif(messange.text == "Locküîê") and messange.from_user.id == int(userid):
        if ClientError == False:
            try:
                client.send(("Lock".encode("utf-8")))
                bot.send_message(messange.chat.id,
                    text="Locked")
            except ConnectionResetError:
                bot.send_message(messange.chat.id, 
                    text="TCP ERRORüî¥")
                print(Fore.LIGHTRED_EX + "TCP ERROR: Lock")
                
        elif ClientError == True:
            bot.send_message(messange.chat.id,
                text="Server disableüî¥")

        #os.system('RunDll32.exe user32.dll,LockWorkStation')
        
    #–§—É–Ω–∫—Ü–∏—è Shutdown (–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∞–µ—Ç Windows c–∏—Å—Ç–µ–º—É)
    elif(messange.text == "üî¥Shutdownüî¥") and messange.from_user.id == int(userid):
        if ClientError == False:
            try:
                client.send(("Shutdown".encode("utf-8")))
                bot.send_message(messange.chat.id, 
                    text="üî¥Shutdowning...üî¥")
            except ConnectionResetError:
                bot.send_message(messange.chat.id, 
                    text="TCP ERRORüî¥")
                print(Fore.LIGHTRED_EX + "TCP ERROR: Shutdown")
                
        elif ClientError == True:
            bot.send_message(messange.chat.id,
                text="Server disableüî¥")

        #os.system('shutdown.exe -s -t 5')
    
    #–§—É–Ω–∫—Ü–∏—è –ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è (–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç c–∏—Å—Ç–µ–º—É –≤ —Ä–µ–∂–∏–º –ì–∏–±–µ—Ä–Ω–∞—Ü–∏–∏)
    elif(messange.text == "Hibernationüíæ") and messange.from_user.id == int(userid):
        if ClientError == False:
            try:
                client.send(("Hibernation".encode("utf-8")))
                bot.send_message(messange.chat.id, 
                    text="Hibernate...üíæ")
            except ConnectionResetError:
                bot.send_message(messange.chat.id, 
                    text="TCP ERRORüî¥")
                print(Fore.LIGHTRED_EX + "TCP ERROR: Hibernation")
                
        elif ClientError == True:
            bot.send_message(messange.chat.id,
                text="Server disableüî¥")

        #os.system('shutdown.exe /h')

    #–§—É–Ω–∫—Ü–∏—è Reboot(–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç c–∏—Å—Ç–µ–º—É)
    elif(messange.text == "RebootüîÑ") and messange.from_user.id == int(userid):
        if ClientError == False:
            try:
                client.send(("Reboot".encode("utf-8")))
                bot.send_message(messange.chat.id, 
                    text="Rebooting...üîÑ")
            except ConnectionResetError:
                bot.send_message(messange.chat.id, 
                    text="TCP ERRORüî¥")
                print(Fore.LIGHTRED_EX + "TCP ERROR: Reboot")
                
        elif ClientError == True:
            bot.send_message(messange.chat.id,
                text="Server disableüî¥") 
            
        #os.system('shutdown.exe -r -t 5')
        
    #info
    elif(messange.text == "Info‚ÑπÔ∏è") and messange.from_user.id == int(userid):
        bot.send_message(messange.chat.id, 
            text="RuFa 2.0-b (OPEN SOURCE)\nCreator Demorien\nTelegramBot")
        
    #–§—É–Ω–∫—Ü–∏—è Special (–í—ã–≤–æ–¥–∏—Ç userid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    elif(messange.text == "Specialüõ†") and messange.from_user.id == int(userid):
        bot.send_message(messange.chat.id, 
            text="Your user id " + str(messange.from_user.id))

    else:
        bot.send_message(messange.chat.id, 
            text="–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç")

if ClientError == False:
    print("\nStarted")
elif ClientError == True:
    print(Fore.LIGHTYELLOW_EX + "\nStarted with errors:\nClient error = " + str(ClientError))
print(Fore.LIGHTCYAN_EX + "==================-DEBUG-===================")

bot.infinity_polling()
